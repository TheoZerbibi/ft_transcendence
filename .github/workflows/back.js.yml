# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Backend CI

on:
  push:
    branches:
      - '*'
      - '**'
      - '*/*'
      - '!**/frontend'
      - '!frontend/**'
      - '!**/frontend/**'
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

  merge_group:

  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Dry-Run'
        default: 'true'
        required: false

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
  cancel-in-progress: true

env:
  DEFAULT_BRANCH: master
  NODE_VERSION: 20
  DRY_RUN: true
  SPARSE_CHECKOUT: |-
    .github/actions/
    package.json
    pnpm-lock.yaml
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  POSTGRES_USER: ${{ vars.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ vars.POSTGRES_DB }}
  POSTGRES_ENABLED: true
  DATABASE_URL: "postgresql://${{ vars.POSTGRES_USER }}:${{ vars.POSTGRES_PASSWORD }}@localhost:5432/${{ vars.POSTGRES_DB }}?schema=public"
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_PASS: ${{ vars.REDIS_PASSWORD }}
  REDIS_URL: redis://redis:6379
  NODE_ENV: development
  API42_UID: ${{ secrets.API42_UID }}
  API42_SECRET: ${{ secrets.API42_SECRET }}
  HOSTNAME: localhost
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  PORT: 3001

jobs:

  setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'back'
    outputs:
      os-matrix: ${{ steps.os-matrix.outputs.os-matrix }}
      os-matrix-is-full: ${{ steps.os-matrix-is-full.outputs.os-matrix-is-full }}
      os-matrix-prefetch: ${{ steps.os-matrix-prefetch.outputs.matrix }}
      test-shard-matrix: ${{ steps.schedule-test-shards.outputs.test-shard-matrix }}
      test-matrix-empty: ${{ steps.schedule-test-shards.outputs.test-matrix-empty }}

    steps:
      - name: Calculate `os-matrix-is-full` output
        id: os-matrix-is-full
        env:
          IS_FULL: >-
            ${{
              (
                github.event_name != 'pull_request' ||
                contains(github.event.pull_request.labels.*.name, 'ci:fulltest')
              ) && 'true' || ''
            }}
        run: |
          echo 'OS_MATRIX_IS_FULL=${{ env.IS_FULL }}' >> "$GITHUB_ENV"
          echo 'os-matrix-is-full=${{ env.IS_FULL }}' >> "$GITHUB_OUTPUT"

      - name: Calculate `os-matrix` output
        id: os-matrix
        env:
          OS_ALL: '["ubuntu-latest", "macos-latest", "windows-latest"]'
          OS_LINUX_ONLY: '["ubuntu-latest"]'
        run: |
          echo 'os-matrix=${{
            env.OS_MATRIX_IS_FULL && env.OS_ALL || env.OS_LINUX_ONLY
          }}' >> "$GITHUB_OUTPUT"

      - name: Detect changed files
        if: ${{ github.event_name == 'pull_request' }}
        id: changed-files
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.event.repository.full_name }}
          PR_URL: >-
            https://api.github.com/repos/{owner}/{repo}/compare/${{
              github.event.pull_request.base.sha
            }}...${{
              github.event.pull_request.head.sha
            }}
          JQ_FILTER: >-
            "changed-files=" + ([.files[].filename] | tostring)
        run: gh api ${{ env.PR_URL }} | jq -rc '${{ env.JQ_FILTER }}' >> "$GITHUB_OUTPUT"

      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          sparse-checkout: ${{ env.SPARSE_CHECKOUT }}

      - name: Calculate matrix for `node_modules` prefetch
        uses: ./.github/actions/calculate-prefetch-matrix
        id: os-matrix-prefetch
        with:
          repo: ${{ github.event.repository.full_name }}
          token: ${{ github.token }}
          node-version: ${{ env.NODE_VERSION }}

      - name: Prefetch modules for `ubuntu-latest`
        id: setup-node
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          os: ${{ runner.os }}
          save-cache: true

      - name: Schedule test shards
        id: schedule-test-shards
        env:
          ALL_PLATFORMS: ${{ env.OS_MATRIX_IS_FULL }}
          FILTER_SHARDS: ${{ github.event.pull_request.draft && 'true' || '' }}
          CHANGED_FILES: ${{ steps.changed-files.outputs.changed-files }}
        run: |
          echo "$(pnpm -s schedule-test-shards)" >> "$GITHUB_OUTPUT"

  prefetch:
    needs: [setup]
    if: |
      !(github.event.pull_request.draft == true &&
        needs.setup.outputs.test-matrix-empty == 'true')

    strategy:
      matrix:
        os: ${{ fromJSON(needs.setup.outputs.os-matrix-prefetch) }}
        node-version: ${{ env.NODE_VERSION }}

    runs-on: ${{ matrix.os }}

    timeout-minutes: 10

    steps:
      - name: Checkout code
        if: needs.setup.outputs.os-matrix-is-full && runner.os != 'Linux'
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          sparse-checkout: ${{ env.SPARSE_CHECKOUT }}

      - name: Setup Node.js
        if: needs.setup.outputs.os-matrix-is-full && runner.os != 'Linux'
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          os: ${{ runner.os }}
          save-cache: true

  lint-eslint:
    needs: [setup]
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          os: ${{ runner.os }}

      - name: Restore eslint cache
        uses: actions/cache/restore@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: .cache/eslint
          key: eslint-main-cache

      - name: Lint
        run: pnpm lint

      - name: Remove cache
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.event.repository.full_name }}
        run: |
          gh api --method DELETE /repos/{owner}/{repo}/actions/caches?key=eslint-main-cache ||
            echo "Cache not found"

      - name: Save eslint cache
        if: github.event_name == 'push'
        uses: actions/cache/save@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: .cache/eslint
          key: eslint-main-cache

  lint-prettier:
    needs: [setup]
    runs-on: ubuntu-latest
    timeout-minutes: 7

    permissions:
      actions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          os: ${{ runner.os }}

      - name: Restore prettier cache
        uses: actions/cache/restore@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: .cache/prettier
          key: prettier-main-cache

      - name: Lint
        run: pnpm prettier --cache-location .cache/prettier

      - name: Remove cache
        if: github.event_name == 'push'
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.event.repository.full_name }}
        run: |
          gh api --method DELETE /repos/{owner}/{repo}/actions/caches?key=prettier-main-cache ||
            echo "Cache not found"

      - name: Save prettier cache
        if: github.event_name == 'push'
        uses: actions/cache/save@704facf57e6136b1bc63b828d79edcd491f0ee84 # v3.3.2
        with:
          path: .cache/prettier
          key: prettier-main-cache

  build:
    needs: setup
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_ENABLED: true
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    timeout-minutes: 5
    if: github.event.pull_request.draft != true
    steps:
      - name: Checkout code
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ env.NODE_VERSION }}
          os: ${{ runner.os }}

      - name: Build
        run: pnpm db:deploy && pnpm build

