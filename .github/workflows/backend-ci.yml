name: Backend CI

on:
  push:
    branches:
      - "*"
      - "**"
      - "*/*"
      - "!**/frontend"
      - "!frontend/**"
      - "!**/frontend/**"
    paths:
      - ".github/**"
      - "back/**"
      - "docker/**"
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths:
      - ".github/**"
      - "back/**"
      - "docker/**"

env:
  NODE_VERSION: 20

defaults:
  run:
    working-directory: back

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

  lint-eslint:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: back/pnpm-lock.yaml
      - name: Install deps
        run: pnpm install
      - name: Lint
        run: pnpm lint

  lint-prettier:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: back/pnpm-lock.yaml
      - name: Install deps
        run: pnpm install
      - name: Prettier
        run: pnpm prettier

  build-backend:
    needs: [setup]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: back/pnpm-lock.yaml
      - name: Install deps
        run: pnpm install
      - name: Generate Prisma Client
        run: npx prisma generate
      - name: Build
        run: pnpm build
    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_ENABLED: true
      DATABASE_URL: "postgresql://${{ vars.POSTGRES_USER }}:${{ vars.POSTGRES_PASSWORD }}@localhost:5432/${{ vars.POSTGRES_DB }}?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASS: ${{ vars.REDIS_PASSWORD }}
      REDIS_URL: redis://redis:6379
      NODE_ENV: development
      API42_UID: ${{ secrets.API42_UID }}
      API42_SECRET: ${{ secrets.API42_SECRET }}
      HOSTNAME: localhost
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      PORT: 3001

  build-and-push-in-registry:
    needs:
      - setup
      - lint-eslint
      - lint-prettier
      - build-backend
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/features/pong' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{env.GITHUB_TOKEN}}
      - name: Build and push Docker image
        run: |
          echo "Building Docker image..."
          docker build -t ${{ env.DOCKER_REGISTRY }}/back-image:latest -f ../docker/node/Dockerfile --target production .

          echo "Pushing Docker image to GitHub Container Registry..."
          docker push ${{ env.DOCKER_REGISTRY }}/back-image:latest
    env:
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_ENABLED: true
      DATABASE_URL: "postgresql://${{ vars.POSTGRES_USER }}:${{ vars.POSTGRES_PASSWORD }}@localhost:5432/${{ vars.POSTGRES_DB }}?schema=public"
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASS: ${{ vars.REDIS_PASSWORD }}
      REDIS_URL: redis://redis:6379
      NODE_ENV: production
      API42_UID: ${{ secrets.API42_UID }}
      API42_SECRET: ${{ secrets.API42_SECRET }}
      HOSTNAME: localhost
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
      DOCKER_REGISTRY: ghcr.io/ft_transcendence
      PORT: 3001
