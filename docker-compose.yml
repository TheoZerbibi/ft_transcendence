version: "3.9"

services:

  front:
    build:
      context: ./front
      target: production
      dockerfile: ./Dockerfile
      args:
      - NODE_ENV=$NODE_ENV
      - VITE_HOST=$HOSTNAME
      - VITE_API42_UID=$API42_UID
      - VITE_API42_CALLBACK=$API42_CALLBACK
      - VITE_PORT=$FRONT_PORT
      - VITE_API_PORT=$API_PORT
      - VITE_GAME_SOCKET_PORT=$GAME_SOCKET_PORT
      - VITE_CHAT_SOCKET_PORT=$CHAT_SOCKET_PORT
    container_name: front
    ports:
      - ${FRONT_PORT}:${FRONT_PORT}
    depends_on:
      api:
        condition: service_healthy
      game:
        condition: service_started
      chat:
        condition: service_started
    environment:
      NODE_ENV: production
      VITE_PORT: ${FRONT_PORT}
    command: sh -c "pnpm start:prod"
    restart: always


  game:
    build:
      context: ./sockets/game
      target: production
      dockerfile: ./Dockerfile
    container_name: game
    ports:
    - ${GAME_SOCKET_PORT}:${GAME_SOCKET_PORT}
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASS: ${REDIS_PASS}
      REDIS_URL: ${REDIS_URL}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      HOST: ${HOSTNAME}
      PORT: ${GAME_SOCKET_PORT}
    networks:
      - default
      - project
    command: sh -c "pnpm db:pull && pnpm start:prod"
    restart: always

  chat:
    build:
      context: ./sockets/chat
      target: production
      dockerfile: ./Dockerfile
    container_name: chat
    ports:
    - ${CHAT_SOCKET_PORT}:${CHAT_SOCKET_PORT}
    depends_on:
      api:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASS: ${REDIS_PASS}
      REDIS_URL: ${REDIS_URL}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      HOST: ${HOSTNAME}
      PORT: ${CHAT_SOCKET_PORT}
    networks:
      - default
      - project
    command: sh -c "pnpm db:pull && pnpm start:prod"
    restart: always

  api:
    build:
      context: ./back
      target: production
      dockerfile: ./Dockerfile
    container_name: api
    ports:
      - ${API_PORT}:${API_PORT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_ENABLED: ${POSTGRES_ENABLED}
      DATABASE_URL: ${DATABASE_URL}
      HOST: ${HOSTNAME}
      PORT: ${API_PORT}
      FRONT_PORT: ${FRONT_PORT}
      JWT_SECRET: ${JWT_SECRET}
      API42_UID: ${API42_UID}
      API42_SECRET: ${API42_SECRET}
      API42_CALLBACK: ${API42_CALLBACK}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASS: ${REDIS_PASS}
      REDIS_URL: ${REDIS_URL}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      CLOUDINARY_URL: ${CLOUDINARY_URL}
    networks:
      - default
      - project
    healthcheck:
      test: ["CMD", "wget", "${HOSTNAME}:${API_PORT}/healthz -q -O - > /dev/null 2>&1"]
      interval: 20s
      timeout: 10s
      retries: 5
    command: sh -c "pnpm db:deploy:prod && pnpm start:prod"
    restart: always

  postgres:
    image: postgres:16-alpine3.18
    container_name: postgres
    volumes:
        - pgdata:/var/lib/postgresql/data
    expose:
      - 5432
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_ENABLED: ${POSTGRES_ENABLED}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - project
    restart: always

  redis:
    image: redis:7.2.1-alpine
    container_name: redis
    expose:
      - '6379'
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 1m
      interval: 5s
      timeout: 2s
      retries: 21
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASS}
    networks:
      - project
    restart: always

volumes:
  redisdata:
  pgdata:

networks:
  default:
  project:
    internal: true
