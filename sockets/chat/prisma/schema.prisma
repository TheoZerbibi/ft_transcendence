generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model channel_messages {
  id              Int           @id @default(autoincrement())
  content         String
  created_at      DateTime      @default(now())
  channel_user_id Int
  channel_users   channel_users @relation(fields: [channel_user_id], references: [id], onDelete: Cascade)
}

model channel_users {
  id               Int                @id @default(autoincrement())
  channel_id       Int
  user_id          Int
  is_muted         DateTime?
  is_owner         Boolean            @default(false)
  is_admin         Boolean            @default(false)
  is_ban           Boolean            @default(false)
  created_at       DateTime           @default(now())
  channel_messages channel_messages[]
  channels         channels           @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  users            users              @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([channel_id, user_id])
}

model channels {
  id            Int             @id @default(autoincrement())
  name          String          @unique
  public        Boolean         @default(true)
  password      String?
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  channel_users channel_users[]
}

model friends {
  user_id                        Int
  friend_id                      Int
  status                         Int
  users_friends_friend_idTousers users @relation("friends_friend_idTousers", fields: [friend_id], references: [id], onDelete: Cascade)
  users_friends_user_idTousers   users @relation("friends_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, friend_id])
}

model games {
  id           Int            @id @unique @default(autoincrement())
  uid          String         @unique
  is_private   Boolean        @default(false)
  created_at   DateTime       @default(now())
  started_at   DateTime?
  end_at       DateTime?
  game_players game_players[]
}

model users {
  id                                   Int               @id @default(autoincrement())
  login                                String            @unique
  display_name                         String            @unique
  email                                String
  dAuth                                Boolean           @default(false)
  avatar                               String
  created_at                           DateTime          @default(now())
  updated_at                           DateTime
  last_login                           DateTime          @default(now())
  secret                               String?
  blocked_blocked_blocked_by_idTousers blocked[]         @relation("blocked_blocked_by_idTousers")
  blocked_blocked_blocked_idTousers    blocked[]         @relation("blocked_blocked_idTousers")
  channel_users                        channel_users[]
  direct_messages                      direct_messages[]
  friends_friends_friend_idTousers     friends[]         @relation("friends_friend_idTousers")
  friends_friends_user_idTousers       friends[]         @relation("friends_user_idTousers")
  game_players                         game_players[]
}

model game_players {
  player_id Int
  game_id   Int
  is_win    Boolean?
  is_spec   Boolean?
  score     Int      @default(0)
  side      Int      @default(0)
  games     games    @relation(fields: [game_id], references: [id], onDelete: Cascade)
  users     users    @relation(fields: [player_id], references: [id])

  @@id([player_id, game_id])
}

model blocked {
  blocked_id                         Int
  blocked_by_id                      Int
  users_blocked_blocked_by_idTousers users @relation("blocked_blocked_by_idTousers", fields: [blocked_by_id], references: [id], onDelete: Cascade)
  users_blocked_blocked_idTousers    users @relation("blocked_blocked_idTousers", fields: [blocked_id], references: [id], onDelete: Cascade)

  @@id([blocked_by_id, blocked_id])
}

model direct_messages {
  id         Int      @id @default(autoincrement())
  content    String
  created_at DateTime @default(now())
  friend_id  Int
  user_id    Int
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}
