// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider	= "prisma-client-js"
}

generator dbml {
  provider   = "prisma-dbml-generator"
  output     = "./dbml"
  outputName = "transcendence.dbml"
  projectName = "Transcendence"
  projectDatabaseType = "PostgreSQL"
  projectNote = "Transcendence DBML file"
}

datasource db {
	provider	= "postgresql"
	url			= env("DATABASE_URL")
}

model Channel {
	id			Int			@id @default(autoincrement())
	name		String
	public		Boolean		@default(true)
	password	String?
	created_at	DateTime	@default(now())
	updated_at	DateTime	@default(now()) @updatedAt
	channelUser	ChannelUser[]

	@@map("channels")
}

model ChannelUser {
	id					Int					@id @default(autoincrement())
	channel_id			Int
	user_id				Int
	is_muted			DateTime?
	is_owner			Boolean				@default(false)
	is_admin			Boolean				@default(false)
	is_ban				Boolean				@default(false)
	created_at			DateTime			@default(now())
	channelMessage		ChannelMessage[]
	channel				Channel				@relation(fields: [channel_id], references: [id], onDelete: Cascade)
	user				User				@relation(fields: [user_id], references: [id], onDelete: Cascade)

	@@unique([channel_id, user_id])
	@@map("channel_users")
}

model ChannelMessage {
	id				Int			@id @default(autoincrement())
	content			String
	created_at		DateTime	@default(now())
	channel_user_id	Int
	channelUsers	ChannelUser	@relation(fields: [channel_user_id], references: [id], onDelete: Cascade)

	@@map("channel_messages")
}
model User {
	id				Int	@id @default(autoincrement())
	login			String @unique
	display_name	String
	email			String
	dAuth			Boolean @default(false)
	avatar			String
	created_at		DateTime @default(now())
	updated_at		DateTime @updatedAt
	last_login		DateTime @default(now())
	channelUser		ChannelUser[]


	user			Friends[] @relation("user")
	friends			Friends[] @relation("friends")

	@@map("users")
}

model Friends {
	user		User	@relation("user", fields: [user_id], references: [id])
	friends		User	@relation("friends", fields: [friend_id], references: [id])
	user_id		Int	
	friend_id	Int

	@@id([user_id, friend_id])
	@@map("friends")
}
