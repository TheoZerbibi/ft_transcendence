generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider            = "prisma-dbml-generator"
  output              = "./dbml"
  projectDatabaseType = "PostgreSQL"
  projectName         = "Transcendence"
  outputName          = "transcendence.dbml"
  projectNote         = "Transcendence DBML file"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channel {
  id          Int           @id @default(autoincrement())
  name        String
  public      Boolean       @default(true)
  password    String?
  created_at  DateTime      @default(now())
  update_at   DateTime      @default(now()) @updatedAt
  channelUser ChannelUser[]

  @@map("channels")
}

model ChannelUser {
  channel_id     Int
  user_id        Int
  is_muted       DateTime?
  is_owner       Boolean          @default(false)
  is_admin       Boolean          @default(false)
  is_ban         Boolean          @default(false)
  channelMessage ChannelMessage[]
  channel        Channel          @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  user           User             @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, channel_id])
  @@map("channel_users")
}

model ChannelMessage {
  id         Int         @id @default(autoincrement())
  user_id    Int
  channel_id Int
  content    String
  created_at DateTime    @default(now())
  user       ChannelUser @relation(fields: [user_id, channel_id], references: [user_id, channel_id], onDelete: Cascade)

  @@map("channel_messages")
}

model Game {
	id			Int	@id @default(autoincrement()) @unique
	uid			String	@unique
	is_private	Boolean	@default(false)
	created_at	DateTime @default(now())
	started_at	DateTime?
	end_at		DateTime?
	gamePlayer 	GamePlayer[]

	@@map("games")
}

model GamePlayer {
	player_id	Int
	game_id		Int
	is_win		Boolean?
	is_spec		Boolean?
	player		User	@relation(fields: [player_id], references: [id])
	game		Game	@relation(fields: [game_id], references: [id], onDelete: Cascade)

	@@id([player_id, game_id])
	@@map("game_players")
}

model User {
		id           Int           @id @default(autoincrement())
		login        String        @unique
		email        String
		dAuth        Boolean       @default(false)
		avatar       String
		created_at   DateTime      @default(now())
		display_name String
		updated_at   DateTime      @updatedAt
		last_login   DateTime      @default(now())
		channelUser  ChannelUser[]


		user			Friends[] @relation("user")
		friends			Friends[] @relation("friends")
		GamePlayer		GamePlayer[]

		@@map("users")
}

model Friends {
	user		User	@relation("user", fields: [user_id], references: [id])
		friends		User	@relation("friends", fields: [friend_id], references: [id])
		user_id		Int	
		friend_id	Int

		@@id([user_id, friend_id])
		@@map("friends")
}
